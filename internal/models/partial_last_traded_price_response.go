// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PartialLastTradedPriceResponse partial last traded price response
//
// swagger:model PartialLastTradedPriceResponse
type PartialLastTradedPriceResponse struct {

	// errors
	Errors []string `json:"errors"`

	// ltp
	Ltp []*LastTradedPrice `json:"ltp"`
}

// Validate validates this partial last traded price response
func (m *PartialLastTradedPriceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLtp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialLastTradedPriceResponse) validateLtp(formats strfmt.Registry) error {
	if swag.IsZero(m.Ltp) { // not required
		return nil
	}

	for i := 0; i < len(m.Ltp); i++ {
		if swag.IsZero(m.Ltp[i]) { // not required
			continue
		}

		if m.Ltp[i] != nil {
			if err := m.Ltp[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ltp" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ltp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this partial last traded price response based on the context it is used
func (m *PartialLastTradedPriceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLtp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialLastTradedPriceResponse) contextValidateLtp(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ltp); i++ {

		if m.Ltp[i] != nil {

			if swag.IsZero(m.Ltp[i]) { // not required
				return nil
			}

			if err := m.Ltp[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ltp" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ltp" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartialLastTradedPriceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartialLastTradedPriceResponse) UnmarshalBinary(b []byte) error {
	var res PartialLastTradedPriceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
